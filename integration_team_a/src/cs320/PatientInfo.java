package cs320;

import java.util.HashMap;
import java.util.Date;

/**
 * Patient Info Sub-module
 * <p> The Patient Info sub-module manages data that corresponds to a patient. 
 * It is a representation of the patient's information. </p>
 * 
 */
public class PatientInfo extends AbstractModule {

	/**
	 * the patient's first name
	 */
	private String firstName = "";
	
	/**
	 * the patient's last name
	 */
	private String lastName = "";
	
	/**
	 * the patient's date of birth as a String object
	 */
	private DateWrapper dateOfBirth = new DateWrapper(); 
	
	/**
	 * the patient's height (in inches)
	 */
	private int height = 0;
	
	/**
	 * the patient's weight (in pounds)
	 */
	private int weight = 0;
	
	/**
	 * medical record number (unique to patient)
	 */
	private long medicalRecordNumber = 0; 

	/**
	 * the patient's gender (male, female, other)
	 */
	private String gender = "";
	
	
	public PatientInfo() {
	}
	
	/**
	 * Patient Info constructor
	 * <p> This constructor takes in a first name and a last name and generates a new
	 * Patient Info object. </p>
	 * 
	 * @param firstName the Patient's first name
	 * @param lastName the Patient's last name
	 */
	public PatientInfo(String firstName, String lastName) {
		this.firstName = firstName.trim();
		this.lastName = lastName.trim();
	}
	
	/**
	 * Patient Info constructor
	 * <p> This constructor takes a first name, a last name, and a date of birth
	 * and generates a new Patient Info object. </p>
	 * 
	 * @param firstName the Patient's first name
	 * @param lastName the Patient's last name
	 * @param dateOfBirth the Patient's date of birth
	 */
	public PatientInfo(String firstName, String lastName, String dateOfBirth) {
		this.firstName = firstName.trim();
		this.lastName = lastName.trim();
		this.dateOfBirth = new DateWrapper(dateOfBirth.trim());
	}
	
	/**
	 * <p> This constructor returns a Patient Info object for Search Module's SearchForPatient() function. </p>
	 */	
	public PatientInfo(HashMap<String, String> theMap) {
		if (theMap.containsKey("firstName"))
			firstName = theMap.get("firstName").trim();
		if (theMap.containsKey("lastName"))
			lastName = theMap.get("lastName").trim();
		if (theMap.containsKey("dateOfBirth"))
			dateOfBirth = new DateWrapper(theMap.get("dateOfBirth").trim());
		if (theMap.containsKey("height"))
			height = Integer.parseInt(theMap.get("height").trim());
		if (theMap.containsKey("weight"))
			weight = Integer.parseInt(theMap.get("weight").trim());
		if (theMap.containsKey("medicalRecordNumber"))
			medicalRecordNumber = Long.parseLong(theMap.get("weight").trim());
		if (theMap.containsKey("gender"))
			gender = theMap.get("gender").trim();
	}

	/**
	 * @return the firstName
	 */
	public String GetFirstName() {
		return firstName;
	}

	/**
	 * @return the lastName
	 */
	public String GetLastName() {
		return lastName;
	}

	/**
	 * @return the dateOfBirth as a Date object
	 */
	public DateWrapper GetDateOfBirth() {
		return dateOfBirth;
	}
	
	/**
	 * @return the height
	 */
	public int GetHeight() {
		return height;
	}

	/**
	 * @return the weight
	 */
	public int GetWeight() {
		return weight;
	}

	/**
	 * @return the medicalRecordNumber
	 */
	public long GetMedicalRecordNumber() {
		return medicalRecordNumber;
	}
	
	/**
	 * @return the gender
	 */
	public String GetGender() {
		return gender;
	}
	
	/**
	 * @param height the height to set
	 */
	public void SetHeight(int height) {
		this.height = height;
	}

	/**
	 * @param weight the weight to set
	 */
	public void SetWeight(int weight) {
		this.weight = weight;
	}
	
	/**
	 * @param medicalRecordNumber the medicalRecordNumber to set
	 */
	public void SetMedicalNumber(long medicalRecordNumber) {
		this.medicalRecordNumber = medicalRecordNumber;
	}

	/**
	 * @param gender the gender to set
	 */
	public void SetGender(String gender) {
		this.gender = gender;
	}
	
	/**
	 * @return a string representation of the patient info
	 */
	public String toString(){
		return "Patient Name: " + this.GetFirstName() + " " + this.GetLastName() + "\n";
	}

	/** 
	 * <p>Returns the DisplayObject constructed from Display Utilities elements that displays all elements
	 *  associated with the current Patient Info object.
	 * 
	 * @return the DisplayObject generated by this display function.
	 **/
	public boolean Display() { 
		DisplayUtility.GetInstance().Display(this);
		return true;
	} 
	

	/**
	 * 
	 * @return a HashMap representation of PatientInfo.
	 **/
	public HashMap<String,String> toHashMap() {
		HashMap<String, String> saveMap = new HashMap<String, String>();
		saveMap.put("firstName", this.firstName);
		saveMap.put("lastName", this.lastName);
		saveMap.put("dateOfBirth", this.dateOfBirth.toString());
		saveMap.put("height", "" + this.height); 
		saveMap.put("weight", "" + this.weight);
		saveMap.put("medicalRecordNumber", "" + this.medicalRecordNumber);
		saveMap.put("gender", this.gender);
		return saveMap;
	}
	
	/**
	 * <p>Saves the data in PatientInfo to the data repository via the Storage Module. 
	 * The Patient Record Module calls this function when it either saves or stores a Patient Record. 
	 * This function interacts directly with the Storage Module.
	 * 
	 * @return whether save was successful or not
	 */
	public boolean Save() {
		Storage store = Storage.GetInstance();
		store.Save("cs320.patient", toHashMap());
		return true;
	}

	@Override
	public boolean Store() {
		// TODO Auto-generated method stub
		return false;
	}
}
